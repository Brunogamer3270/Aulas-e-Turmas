# ‚úÖ Importar as bibliotecas necess√°rias
import cv2                     # Biblioteca para capturar v√≠deo e manipular imagens
import mediapipe as mp         # Biblioteca para detectar pontos do rosto
import time                    # Biblioteca para contar o tempo
import winsound                # Biblioteca para tocar som no Windows

# üî¥ Definimos um limite de tempo (em segundos) para acionar o alerta se os olhos n√£o forem detectados
TEMPO_LIMITE = 2  

# ‚úÖ Inicializa√ß√£o do detector de rosto do MediaPipe
mp_face_mesh = mp.solutions.face_mesh  # Carregando o modelo de detec√ß√£o de rosto
face_mesh = mp_face_mesh.FaceMesh(min_detection_confidence=0.5)  # Definindo a confian√ßa m√≠nima para detectar

# ‚úÖ Vari√°veis de controle para saber se os olhos est√£o sendo detectados e contar o tempo
tempo_ausente = 0            # Vai armazenar o tempo em que os olhos n√£o foram detectados
olhos_detectados = True      # Estado inicial, assumindo que os olhos est√£o na tela

# ‚úÖ Captura de v√≠deo da webcam (0 significa a c√¢mera principal do computador)
cam = cv2.VideoCapture(0)

# ‚úÖ Loop infinito para capturar os frames da c√¢mera
while True:
    ok, frame = cam.read()   # Captura cada frame da c√¢mera
    if not ok:               # Se n√£o conseguir capturar, ele sai do loop
        break

    # ‚úÖ Espelhar a imagem para ficar mais intuitivo
    frame = cv2.flip(frame, 1)

    # ‚úÖ Converter a imagem para RGB, pois o MediaPipe trabalha com esse formato
    rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # ‚úÖ Detectar os pontos do rosto usando o MediaPipe
    resultado = face_mesh.process(rgb)

    # ‚úÖ Se detectar um rosto, ele entra neste bloco
    if resultado.multi_face_landmarks:
        for face_landmarks in resultado.multi_face_landmarks:
            # ‚úÖ Desenhar pequenos c√≠rculos nos pontos que representam os olhos
            for i in [33, 133, 362, 263]:  # Esses n√∫meros representam os pontos nos olhos
                ponto = face_landmarks.landmark[i]    # Pegando as coordenadas do ponto
                h, w, _ = frame.shape                 # Pegando altura e largura do frame
                x, y = int(ponto.x * w), int(ponto.y * h)  # Convertendo para coordenadas da tela
                cv2.circle(frame, (x, y), 2, (0, 255, 0), -1)  # Desenhar o ponto na tela

        # ‚úÖ Quando os olhos s√£o detectados, o tempo √© reiniciado
        olhos_detectados = True
        tempo_ausente = time.time()  # Armazena o tempo em que os olhos foram detectados
    else:
        if olhos_detectados:
            # ‚úÖ Se os olhos pararam de ser detectados, ele marca o tempo atual
            olhos_detectados = False
            tempo_ausente = time.time()
        else:
            # ‚úÖ Calcula o tempo sem detectar os olhos
            if time.time() - tempo_ausente > TEMPO_LIMITE:
                print("‚ö†Ô∏è Aten√ß√£o! Olhos n√£o detectados por mais de 2 segundos!")
                
                # ‚úÖ Toca um som de alerta se os olhos n√£o aparecem por 2 segundos
                winsound.Beep(1000, 500)  # Som de 1000Hz por 500ms
                tempo_ausente = time.time()  # Reinicia o tempo para n√£o tocar v√°rias vezes

    # ‚úÖ Exibir o v√≠deo na tela
    cv2.imshow("Detec√ß√£o de Olhos", frame)

    # ‚úÖ Se pressionar ESC (27), o programa para
    if cv2.waitKey(1) == 27:
        break

# ‚úÖ Fecha a c√¢mera e a janela quando o loop √© finalizado
cam.release()
cv2.destroyAllWindows()
